- name: Execute Terraform
  terraform:
    force_init: true
    backend_config:
      region: '{{ aws_region }}'
      bucket: '{{ aws_state_bucket }}'
      dynamodb_table: '{{ aws_state_table }}'
    project_path: '{{ playbook_dir }}/terraform/'
    state: '{{ terraform_state }}'
    variables: {
      ansible_inventory_path: '{{ playbook_dir }}',
      ansible_group_vars_path: '{{ playbook_dir }}/group_vars/all/',
      hcloud_token: '{{ hcloud_token }}',
      hcloud_ssh_keys: '{{ hcloud_ssh_keys|to_json }}',
      hcloud_image: '{{ hcloud_image }}',
      hcloud_location: '{{ hcloud_location }}',
      hcloud_primary_count: '{{ hcloud_primary_count }}',
      hcloud_primary_type: '{{ hcloud_primary_type }}',
      hcloud_primary_hostname_format: '{{ hcloud_primary_hostname_format }}',
      hcloud_secondary_count: '{{ hcloud_secondary_count }}',
      hcloud_secondary_type: '{{ hcloud_secondary_type }}',
      hcloud_secondary_hostname_format: '{{ hcloud_secondary_hostname_format }}',
      hcloud_ip_range: '{{ hcloud_ip_range }}',
      hcloud_subnet_ip_range: '{{ hcloud_subnet_ip_range }}',
      cloudflare_api_token: '{{ cloudflare_api_token }}',
      cloudflare_domain: '{{ cloudflare_domain }}',
      cloudflare_email: '{{ cloudflare_email }}',
    }
  register: terraform_result

- name: Store Terraform Output
  copy: "content={{ terraform_result.stdout }} dest={{ playbook_dir }}/terraform.stdout"
  delegate_to: localhost

- name: Remove Generated Inventory
  file:
    path: "{{ playbook_dir }}/production"
    state: absent
  when: terraform_state == "absent"

- name: Remove Generated Group Vars
  file:
    path: "{{ playbook_dir }}/group_vars/all/terraform_outputs.yaml"
    state: absent
  when: terraform_state == "absent"